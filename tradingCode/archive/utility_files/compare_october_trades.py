"""
Compare SMA 20,100 trades for October 2024 with reference file.
"""

import pandas as pd
import numpy as np
from datetime import datetime
import sys
import os

def load_and_filter_trades(file_path, filter_month=None, is_reference=False):
    """Load trades and filter for specific month if provided."""
    try:
        df = pd.read_csv(file_path)
        print(f"Loaded {len(df)} trades from {file_path}")
        
        if is_reference:
            # Parse reference file format
            df['EntryTime'] = pd.to_datetime(df['Date'], format='%d/%m/%Y %I:%M:%S %p')
            df['ExitTime'] = pd.to_datetime(df['Ex. date'], format='%d/%m/%Y %I:%M:%S %p')
            df['Entry_Price'] = df['Price']
            df['Exit_Price'] = df['Ex. Price']
            # AB's % Profit (without % sign) should equal our $ PnL
            df['PnL_Expected'] = df['% Profit'].str.rstrip('%').astype(float)
            df['Direction'] = df['Trade']
        elif 'EntryTime' in df.columns:
            df['EntryTime'] = pd.to_datetime(df['EntryTime'])
            df['ExitTime'] = pd.to_datetime(df['ExitTime'])
            df['Entry_Price'] = df['Avg Entry Price']
            df['Exit_Price'] = df['Avg Exit Price']
            df['PnL_Dollars'] = df['PnL']
            
        if filter_month and 'EntryTime' in df.columns:
            year, month = filter_month
            # Filter for trades that occur in the target month
            mask = ((df['EntryTime'].dt.year == year) & (df['EntryTime'].dt.month == month))
            df = df[mask].copy()
            print(f"Filtered to {len(df)} trades for {year}-{month:02d}")
        
        return df
        
    except Exception as e:
        print(f"Error loading {file_path}: {e}")
        import traceback
        traceback.print_exc()
        return None

def analyze_trade_differences(our_trades, ref_trades):
    """Compare trades and identify differences."""
    print(f"\nTrade Analysis:")
    print(f"Our trades: {len(our_trades)}")
    print(f"Reference trades: {len(ref_trades)}")
    
    if len(our_trades) == 0 and len(ref_trades) == 0:
        print("No trades in either dataset for comparison period")
        return
    
    if len(our_trades) == 0:
        print("No trades generated by our system for this period")
        print("Reference trades exist - potential issue with our system")
        return
        
    if len(ref_trades) == 0:
        print("No reference trades to compare against")
        return
    
    # Compare key trade metrics focusing on prices and times
    if len(our_trades) > 0:
        print(f"\nOur Trades Summary:")
        print(f"  Entry time range: {our_trades['EntryTime'].min()} to {our_trades['EntryTime'].max()}")
        print(f"  Entry price range: {our_trades['Entry_Price'].min():.6f} to {our_trades['Entry_Price'].max():.6f}")
        print(f"  Exit price range: {our_trades['Exit_Price'].min():.6f} to {our_trades['Exit_Price'].max():.6f}")
        print(f"  PnL ($ values): {our_trades['PnL_Dollars'].sum():.6f} total, {our_trades['PnL_Dollars'].mean():.6f} avg")
    
    if len(ref_trades) > 0:
        print(f"\nReference Trades Summary:")
        print(f"  Entry time range: {ref_trades['EntryTime'].min()} to {ref_trades['EntryTime'].max()}")
        print(f"  Entry price range: {ref_trades['Entry_Price'].min():.6f} to {ref_trades['Entry_Price'].max():.6f}")
        print(f"  Exit price range: {ref_trades['Exit_Price'].min():.6f} to {ref_trades['Exit_Price'].max():.6f}")
        print(f"  PnL (% values): {ref_trades['PnL_Expected'].sum():.6f} total, {ref_trades['PnL_Expected'].mean():.6f} avg")
    
    # Trade-by-trade comparison if counts match
    if len(our_trades) == len(ref_trades):
        print(f"\nTrade-by-trade comparison:")
        differences = []
        
        for i in range(len(our_trades)):
            our_trade = our_trades.iloc[i]
            ref_trade = ref_trades.iloc[i]
            
            # Compare key fields focusing on prices and times as requested
            entry_price_diff = abs(our_trade.get('Entry_Price', 0) - ref_trade.get('Entry_Price', 0))
            exit_price_diff = abs(our_trade.get('Exit_Price', 0) - ref_trade.get('Exit_Price', 0))
            
            # Check time differences (convert to string for comparison)
            our_entry_time = str(our_trade.get('EntryTime', ''))
            ref_entry_time = str(ref_trade.get('EntryTime', ''))
            our_exit_time = str(our_trade.get('ExitTime', ''))
            ref_exit_time = str(ref_trade.get('ExitTime', ''))
            
            # Compare AB % Profit with our $ PnL converted to %
            our_pnl_dollars = our_trade.get('PnL_Dollars', 0)
            our_pnl_percent = our_pnl_dollars * 100  # Convert $ to %
            ab_pnl_expected = ref_trade.get('PnL_Expected', 0)  # AB's % without % sign
            pnl_match = abs(our_pnl_percent - ab_pnl_expected)
            
            # Threshold for significant differences - focusing on prices and times
            price_threshold = 0.0001
            pnl_threshold = 0.01
            time_mismatch = (our_entry_time != ref_entry_time) or (our_exit_time != ref_exit_time)
            
            if entry_price_diff > price_threshold or exit_price_diff > price_threshold or pnl_match > pnl_threshold or time_mismatch:
                differences.append({
                    'Trade': i + 1,
                    'Our_Entry_Price': our_trade.get('Entry_Price', 'N/A'),
                    'AB_Entry_Price': ref_trade.get('Entry_Price', 'N/A'),
                    'Entry_Price_Diff': entry_price_diff,
                    'Our_Exit_Price': our_trade.get('Exit_Price', 'N/A'),
                    'AB_Exit_Price': ref_trade.get('Exit_Price', 'N/A'),
                    'Exit_Price_Diff': exit_price_diff,
                    'Our_Entry_Time': our_entry_time,
                    'AB_Entry_Time': ref_entry_time,
                    'Our_Exit_Time': our_exit_time,
                    'AB_Exit_Time': ref_exit_time,
                    'Our_PnL_$': our_pnl_dollars,
                    'Our_PnL_%': our_pnl_percent,
                    'AB_PnL_%': ab_pnl_expected,
                    'PnL_Match_Diff': pnl_match,
                    'Our_Direction': our_trade.get('Direction', 'N/A'),
                    'AB_Direction': ref_trade.get('Direction', 'N/A')
                })
        
        if differences:
            print(f"Found {len(differences)} trades with differences (focusing on prices and times):")
            for diff in differences[:10]:  # Show first 10 differences
                print(f"\n  Trade {diff['Trade']}:")
                print(f"    Entry Prices: Our {diff['Our_Entry_Price']:.6f} vs AB {diff['AB_Entry_Price']:.6f} (diff: {diff['Entry_Price_Diff']:.6f})")
                print(f"    Exit Prices:  Our {diff['Our_Exit_Price']:.6f} vs AB {diff['AB_Exit_Price']:.6f} (diff: {diff['Exit_Price_Diff']:.6f})")
                print(f"    Entry Times:  Our {diff['Our_Entry_Time']} vs AB {diff['AB_Entry_Time']}")
                print(f"    Exit Times:   Our {diff['Our_Exit_Time']} vs AB {diff['AB_Exit_Time']}")
                print(f"    PnL Match:    Our ${diff['Our_PnL_$']:.6f} ({diff['Our_PnL_%']:.6f}%) vs AB {diff['AB_PnL_%']:.6f}% (diff: {diff['PnL_Match_Diff']:.6f})")
                print(f"    Direction:    Our {diff['Our_Direction']} vs AB {diff['AB_Direction']}")
            
            # Export differences to CSV
            import pandas as pd
            differences_df = pd.DataFrame(differences)
            comparison_file = "results/trade_comparison_october.csv"
            differences_df.to_csv(comparison_file, index=False)
            print(f"\n   SUCCESS: Exported detailed comparison to {comparison_file}")
            
        else:
            print("All trades match within tolerance!")
    else:
        print(f"\nTrade count mismatch: {len(our_trades)} vs {len(ref_trades)}")

def main():
    # File paths
    our_trades_file = "results/tradelist.csv"
    ref_trades_file = r"C:\Users\skyeAM\SkyeAM Dropbox\SAMresearch\ABtoPython\ABTradeList\sma_20_100_Oct 2024.csv"
    
    print("SMA 20,100 October 2024 Trade Comparison")
    print("=" * 50)
    
    # Load our trades
    print(f"\n1. Loading our generated trades...")
    our_trades = load_and_filter_trades(our_trades_file, filter_month=(2024, 10))
    
    # Load reference trades
    print(f"\n2. Loading reference trades...")
    ref_trades = load_and_filter_trades(ref_trades_file, is_reference=True)
    
    if our_trades is not None and ref_trades is not None:
        print(f"\n3. Analyzing differences...")
        analyze_trade_differences(our_trades, ref_trades)
        
        # Show sample of each dataset
        print(f"\n4. Sample of our trades:")
        if len(our_trades) > 0:
            cols_to_show = ['EntryTime', 'ExitTime', 'Avg Entry Price', 'Avg Exit Price', 'PnL', 'Direction']
            available_cols = [col for col in cols_to_show if col in our_trades.columns]
            print(our_trades[available_cols].head())
        else:
            print("No trades to display")
        
        print(f"\n5. Sample of reference trades:")
        if len(ref_trades) > 0:
            print("Available columns:", list(ref_trades.columns))
            print(ref_trades.head())
        else:
            print("No reference trades to display")
    
    else:
        print("Failed to load one or both trade files")

if __name__ == "__main__":
    main()