#!/usr/bin/env python3
"""
Comprehensive test for timestamp fix in dashboard pipeline
"""

import sys
import numpy as np
import pandas as pd
from pathlib import Path
import datetime

# Add src to path
src_path = Path(__file__).parent / "src"
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))

def test_timestamp_normalization():
    """Test the timestamp normalization function"""
    
    print("TESTING TIMESTAMP NORMALIZATION")
    print("=" * 50)
    
    from main import normalize_timestamps_for_dashboard
    
    # Test data with seconds timestamps (typical from AmiBroker/CSV)
    seconds_data = {
        'datetime': np.array([1609459200, 1609459500, 1609459800], dtype=np.int64),  # Unix seconds
        'close': np.array([100.0, 101.0, 102.0])
    }
    
    print("Testing seconds to nanoseconds conversion...")
    normalized_seconds = normalize_timestamps_for_dashboard(seconds_data.copy())
    expected_ns = seconds_data['datetime'] * 1_000_000_000
    
    if np.array_equal(normalized_seconds['datetime'], expected_ns):
        print("‚úÖ Seconds to nanoseconds conversion: PASSED")
    else:
        print("‚ùå Seconds to nanoseconds conversion: FAILED")
        return False
    
    # Test data with nanoseconds timestamps (typical from parquet)
    nanoseconds_data = {
        'datetime': np.array([1609459200000000000, 1609459500000000000, 1609459800000000000], dtype=np.int64),
        'close': np.array([100.0, 101.0, 102.0])
    }
    
    print("Testing nanoseconds preservation...")
    normalized_nanoseconds = normalize_timestamps_for_dashboard(nanoseconds_data.copy())
    
    if np.array_equal(normalized_nanoseconds['datetime'], nanoseconds_data['datetime']):
        print("‚úÖ Nanoseconds preservation: PASSED")
    else:
        print("‚ùå Nanoseconds preservation: FAILED")
        return False
    
    return True

def test_synthetic_data_timestamps():
    """Test synthetic data timestamp generation"""
    
    print("\nTESTING SYNTHETIC DATA TIMESTAMPS")
    print("=" * 50)
    
    from main import generate_synthetic_data
    
    # Generate synthetic data
    data = generate_synthetic_data(1000)
    
    # Check that timestamps are in nanoseconds
    sample_timestamp = data['datetime'][0]
    print(f"Sample timestamp: {sample_timestamp}")
    
    if sample_timestamp > 1e15:  # Should be nanoseconds
        print("‚úÖ Synthetic data timestamps in nanoseconds: PASSED")
    else:
        print("‚ùå Synthetic data timestamps in nanoseconds: FAILED")
        return False
    
    # Check datetime_ns exists
    if 'datetime_ns' in data:
        print("‚úÖ Synthetic data includes datetime_ns: PASSED")
    else:
        print("‚ùå Synthetic data missing datetime_ns: FAILED")
        return False
    
    # Check timestamp consistency
    converted_ns = pd.to_datetime(data['datetime_ns']).values.view('int64')
    if np.allclose(data['datetime'], converted_ns):
        print("‚úÖ Timestamp consistency: PASSED")
    else:
        print("‚ùå Timestamp consistency: FAILED")
        return False
    
    return True

def test_dashboard_data_structures():
    """Test ChartDataBuffer with proper timestamps"""
    
    print("\nTESTING DASHBOARD DATA STRUCTURES")
    print("=" * 50)
    
    try:
        from src.dashboard.data_structures import ChartDataBuffer, TradeData
        
        # Create test data with nanoseconds timestamps
        n_bars = 100
        base_timestamp = 1609459200000000000  # Nanoseconds
        
        timestamps = np.arange(base_timestamp, base_timestamp + (n_bars * 300_000_000_000), 300_000_000_000)
        
        chart_data = ChartDataBuffer(
            timestamps=timestamps,
            open=np.random.random(n_bars).astype(np.float32) * 100,
            high=np.random.random(n_bars).astype(np.float32) * 100,
            low=np.random.random(n_bars).astype(np.float32) * 100,
            close=np.random.random(n_bars).astype(np.float32) * 100,
            volume=np.random.random(n_bars).astype(np.float64) * 1000
        )
        
        print(f"‚úÖ ChartDataBuffer created successfully with {len(chart_data)} bars")
        print(f"   Timestamp range: {chart_data.timestamps[0]} to {chart_data.timestamps[-1]}")
        
        # Test TradeData
        trade = TradeData(
            trade_id="TEST001",
            timestamp=timestamps[50],  # Use nanoseconds
            side="buy",
            price=np.float32(100.5),
            quantity=np.float32(10.0),
            pnl=np.float32(25.0)
        )
        
        print(f"‚úÖ TradeData created successfully")
        print(f"   Trade timestamp: {trade.timestamp}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Dashboard data structures test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_full_dashboard_pipeline():
    """Test the complete dashboard pipeline with real data structure"""
    
    print("\nTESTING FULL DASHBOARD PIPELINE")
    print("=" * 50)
    
    try:
        from main import launch_dashboard_robust, generate_synthetic_data
        
        # Generate test data
        price_data = generate_synthetic_data(5000)
        
        # Create test trade data with missing timestamp column (real-world scenario)
        trade_data = pd.DataFrame({
            'trade_id': [f'T{i+1:06d}' for i in range(100)],
            'side': ['buy' if i % 2 == 0 else 'sell' for i in range(100)],
            'price': np.random.uniform(99, 101, 100),
            'quantity': np.random.uniform(1, 10, 100),
            'pnl': np.random.uniform(-25, 50, 100)
            # Note: no 'timestamp' column to test fallback logic
        })
        
        # Create portfolio data
        equity_curve = 100000 + np.cumsum(np.random.randn(len(price_data['close'])) * 10)
        portfolio_data = {'equity_curve': equity_curve}
        
        print(f"Generated {len(price_data['close'])} price bars")
        print(f"Generated {len(trade_data)} trades (no timestamp column)")
        print(f"Price data timestamp range: {price_data['datetime'][0]} to {price_data['datetime'][-1]}")
        print(f"Timestamp sample (should be nanoseconds): {price_data['datetime'][0]}")
        
        # Test the dashboard launch (this will timeout but shouldn't error)
        print("\nAttempting dashboard launch...")
        try:
            # Note: This will likely timeout due to GUI, but should not crash with timestamp errors
            success = launch_dashboard_robust(price_data, trade_data, portfolio_data)
            print("‚úÖ Dashboard launch completed without timestamp errors")
            return True
        except Exception as e:
            if "timestamp" in str(e).lower():
                print(f"‚ùå Dashboard failed with timestamp error: {e}")
                return False
            else:
                print(f"‚úÖ Dashboard launch failed for non-timestamp reason: {e}")
                print("   (This is expected - timestamp handling is working)")
                return True
        
    except Exception as e:
        print(f"‚ùå Full pipeline test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Run all timestamp tests"""
    
    print("TIMESTAMP FIX VALIDATION TEST SUITE")
    print("=" * 60)
    
    tests = [
        test_timestamp_normalization,
        test_synthetic_data_timestamps,
        test_dashboard_data_structures,
        test_full_dashboard_pipeline
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Test {test.__name__} crashed: {e}")
            results.append(False)
    
    print("\n" + "=" * 60)
    print("TEST RESULTS SUMMARY")
    print("=" * 60)
    
    for i, (test, result) in enumerate(zip(tests, results), 1):
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{i}. {test.__name__}: {status}")
    
    overall_success = all(results)
    print(f"\nOVERALL: {'‚úÖ ALL TESTS PASSED' if overall_success else '‚ùå SOME TESTS FAILED'}")
    
    if overall_success:
        print("\nüéâ TIMESTAMP FIX IS WORKING!")
        print("The dashboard should now launch without timestamp errors.")
    else:
        print("\n‚ö†Ô∏è  TIMESTAMP ISSUES REMAIN")
        print("Check the failed tests above for specific problems.")
    
    return overall_success

if __name__ == "__main__":
    main()