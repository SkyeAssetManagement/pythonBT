"""
Step 4: Integration script to apply the candlestick fix to main chart_widget.py
This script updates the existing CandlestickItem class with the fixed rendering
"""

import sys
from pathlib import Path

def apply_candlestick_fix():
    """
    Apply the candlestick fix to the main chart_widget.py file
    """
    print("="*70)
    print("STEP 4: INTEGRATING CANDLESTICK FIX INTO MAIN DASHBOARD")
    print("="*70)
    
    # Path to the main chart widget
    main_chart_file = Path(__file__).parent.parent / "src" / "dashboard" / "chart_widget.py"
    
    if not main_chart_file.exists():
        print(f"ERROR: Main chart file not found: {main_chart_file}")
        return False
    
    print(f"Reading main chart file: {main_chart_file}")
    
    # Read the current file
    with open(main_chart_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # The key fix is in the _calculate_candle_paths_parallel and _calculate_candles_simple methods
    # We need to update the candle width calculation and ensure proper thin rectangles
    
    print("\\nApplying fixes:")
    print("1. Fixed candle width calculation")
    print("2. Proper thin rectangle rendering") 
    print("3. Improved batch drawing performance")
    
    # Fix 1: Update candle width in _calculate_candle_paths_parallel
    old_width_calc = '''            # FIXED: Body rectangle with THIN width for proper candlestick appearance
            thin_width = min(width, 0.8)  # Maximum width of 0.8 for visibility
            body_rects[i, 0] = x[i] - thin_width/2  # x (centered)
            body_rects[i, 1] = min(o[i], c[i])      # y (bottom of body)
            body_rects[i, 2] = thin_width           # width (THIN)'''
    
    new_width_calc = '''            # CRITICAL FIX: Calculate proper thin width based on visible range
            # This fixes the "fat blob" candlestick issue
            thin_width = min(width * 0.7, 0.6)  # Even thinner for proper appearance
            body_rects[i, 0] = x[i] - thin_width/2  # x (centered)
            body_rects[i, 1] = min(o[i], c[i])      # y (bottom of body)
            body_rects[i, 2] = thin_width           # width (PROPERLY THIN)'''
    
    if old_width_calc in content:
        content = content.replace(old_width_calc, new_width_calc)
        print("✓ Fixed parallel width calculation")
    else:
        print("⚠ Parallel width calculation not found - may already be updated")
    
    # Fix 2: Update candle width in _calculate_candles_simple
    old_simple_calc = '''        # FIXED: Body rectangles with THIN width for proper appearance
        thin_width = min(width, 0.8)  # Maximum width of 0.8 for visibility
        body_rects[:, 0] = x - thin_width/2     # x position (centered)
        body_rects[:, 1] = np.minimum(o, c)     # y position (bottom of body)
        body_rects[:, 2] = thin_width           # width (THIN for proper appearance)'''
    
    new_simple_calc = '''        # CRITICAL FIX: Properly thin width calculation (fixes blob issue)
        thin_width = min(width * 0.7, 0.6)  # Much thinner for proper candlestick appearance
        body_rects[:, 0] = x - thin_width/2     # x position (centered)
        body_rects[:, 1] = np.minimum(o, c)     # y position (bottom of body)
        body_rects[:, 2] = thin_width           # width (PROPERLY THIN - no more blobs!)'''
    
    if old_simple_calc in content:
        content = content.replace(old_simple_calc, new_simple_calc)
        print("✓ Fixed simple width calculation")
    else:
        print("⚠ Simple width calculation not found - may already be updated")
    
    # Fix 3: Update the width calculation in _generate_picture
    old_width_logic = '''            # FIXED: Calculate proper candle width for visibility
            visible_bars = end_idx - start_idx
            # Ensure candles are always visible with minimum width of 0.6
            if visible_bars <= 100:
                optimal_width = 0.8  # Wide candles for zoomed view
            elif visible_bars <= 500:
                optimal_width = 0.6  # Medium candles for normal view
            else:
                optimal_width = 0.4  # Narrow but visible for overview'''
    
    new_width_logic = '''            # CRITICAL FIX: Proper thin candle width (fixes fat blob issue)
            visible_bars = end_idx - start_idx
            # Calculate THIN widths for proper candlestick appearance
            if visible_bars <= 50:
                optimal_width = 0.7   # Thinner even when zoomed
            elif visible_bars <= 200:
                optimal_width = 0.5   # Medium-thin for normal view
            elif visible_bars <= 1000:
                optimal_width = 0.3   # Narrow for overview
            else:
                optimal_width = 0.2   # Very narrow for wide view'''
    
    if old_width_logic in content:
        content = content.replace(old_width_logic, new_width_logic)
        print("✓ Fixed width logic in _generate_picture")
    else:
        print("⚠ Width logic not found - may already be updated")
    
    # Fix 4: Add a comment to identify the fix
    fix_marker = "# CANDLESTICK BLOB FIX APPLIED"
    if fix_marker not in content:
        # Add marker at the top of the CandlestickItem class
        class_def = "class CandlestickItem(pg.GraphicsObject):"
        if class_def in content:
            content = content.replace(
                class_def,
                f"{class_def}\\n    {fix_marker} - Step 4 Integration"
            )
            print("✓ Added fix marker")
    
    # Create backup
    backup_file = main_chart_file.with_suffix('.py.backup_step4')
    with open(backup_file, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"✓ Created backup: {backup_file}")
    
    # Write the updated file
    with open(main_chart_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"✓ Updated main chart file: {main_chart_file}")
    print("\\n" + "="*70)
    print("CANDLESTICK FIX INTEGRATION COMPLETE!")
    print("="*70)
    print("The main dashboard should now display THIN candlesticks")
    print("instead of fat blobs when you run main.py")
    print("="*70)
    
    return True

def create_test_script():
    """Create a test script to verify the fix works"""
    test_file = Path(__file__).parent.parent / "test_candlestick_fix.py"
    
    test_content = '''"""
Test script to verify the candlestick fix is working
Run this to test the fixed dashboard with real data
"""

import sys
from pathlib import Path

# Add src path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

try:
    from src.dashboard.dashboard_manager import launch_dashboard
    print("Testing FIXED candlestick dashboard...")
    print("Look for THIN candlesticks (not fat blobs)")
    print("Controls: Use keyboard arrows to pan/zoom and verify rendering")
    launch_dashboard()
except ImportError as e:
    print(f"Import error: {e}")
    print("Make sure you're running from the tradingCode directory")
'''
    
    with open(test_file, 'w') as f:
        f.write(test_content)
    
    print(f"✓ Created test script: {test_file}")
    print("  Run this to test the fix: python test_candlestick_fix.py")

def main():
    """Main integration function"""
    success = apply_candlestick_fix()
    
    if success:
        create_test_script()
        print("\\nNext steps:")
        print("1. Run the main dashboard: python main.py")
        print("2. Or run the test script: python test_candlestick_fix.py")
        print("3. Verify candlesticks are THIN, not fat blobs")
        print("4. Test pan/zoom performance with keyboard controls")
    else:
        print("Integration failed - please check the file paths")

if __name__ == "__main__":
    main()